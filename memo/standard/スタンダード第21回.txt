converter
 ・受け取った情報（オブジェクト）を別の形（オブジェクト）に変えて渡すもの



 // StudentDetail

 package training.StudentManagement03.domain;

 import java.util.List;
 import lombok.Getter;
 import lombok.Setter;
 import training.StudentManagement03.data.Student;
 import training.StudentManagement03.data.StudentCourses;

 @Getter
 @Setter
 public class StudentDetail {

   private Student student;
   private List<StudentCourses> studentCourses;
 }



 // StudentController

 package training.StudentManagement03.controller;

 import java.util.List;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 import training.StudentManagement03.controller.converter.StudentConverter;
 import training.StudentManagement03.data.Student;
 import training.StudentManagement03.data.StudentCourses;
 import training.StudentManagement03.domain.StudentDetail;
 import training.StudentManagement03.service.StudentService;

 @RestController
 public class StudentController {

   private StudentService service;
   private StudentConverter converter;

   @Autowired
   public StudentController(StudentService service, StudentConverter converter) {
     this.service = service;
     this.converter = converter;
   }

   @GetMapping("/studentsList")
   public List<StudentDetail> getStudentsList() {
     List<Student> students = service.searchStudentsList();
     List<StudentCourses> studentCourses = service.searchStudentsCourseList();

     return converter.convertStudentDetails(students, studentCourses);
   }
 }



 // StudentConverter

 package training.StudentManagement03.controller.converter;

 import java.util.ArrayList;
 import java.util.List;
 import java.util.stream.Collectors;
 import org.springframework.stereotype.Component;
 import training.StudentManagement03.data.Student;
 import training.StudentManagement03.data.StudentCourses;
 import training.StudentManagement03.domain.StudentDetail;

 @Component
 public class StudentConverter {

   public List<StudentDetail> convertStudentDetails(List<Student> students,
       List<StudentCourses> studentCourses) {
     List<StudentDetail> studentDetails=new ArrayList<>();
     students.forEach(student -> {
       StudentDetail studentDetail = new StudentDetail();
       studentDetail.setStudent(student);

       List<StudentCourses> convertStudentCourses = studentCourses.stream()
           .filter(studentCourse -> student.getId() == studentCourse.getStudentId())
           .collect(Collectors.toList());

       studentDetail.setStudentCourses(convertStudentCourses);
       studentDetails.add(studentDetail);
     });
     return studentDetails;
   }
 }



